import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { addUserAsync, loginUserAsync } from "./authAPI";

const user = JSON.parse(localStorage.getItem("user"));

const initialState = {
  isLoading: false,
  user: user ? user : null,
  isError: false,
  error: "",
};

export const addUser = createAsyncThunk("user/addUser", async (user) => {
  const response = await addUserAsync(user);
  // The value we return becomes the `fulfilled` action payload
  return response;
});

//yet to be implemented
// export const getUsers = createAsyncThunk("user/getUsers", async () => {
//   const response = await getUsersAsync();
//   return response.data;
// });

export const loginUser = createAsyncThunk(
  "user/loginUser",
  async ({ email, password }) => {
    const response = await loginUserAsync(email, password);
    return response;
  }
);

export const authSlice = createSlice({
  name: "user",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    logoutUser: (state) => {
      state.isLoading = false;
      state.user = null;
      localStorage.removeItem("user");
    },
    reset: (state) => {
      state.isLoading = false;
      state.isError = false;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(addUser.pending, (state) => {
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(addUser.fulfilled, (state, action) => {
        const { name, role, email, _id } = action.payload;
        state.isLoading = false;
        state.isError = false;
        state.error = "";
        state.user = {
          name,
          role,
          email,
          _id,
        };
      })
      .addCase(addUser.rejected, (state, action) => {
        state.isLoading = false;
        state.blog = {};
        state.isError = true;
        state.error = action.error?.message;
      })
      .addCase(loginUser.pending, (state) => {
        state.isLoading = true;
        state.isError = false;
      })
      .addCase(loginUser.fulfilled, (state, action) => {
        const { user } = action.payload;
        state.isLoading = false;
        state.isError = false;
        state.error = "";
        state.user = user;
      })
      .addCase(loginUser.rejected, (state, action) => {
        state.isLoading = false;
        state.blog = {};
        state.isError = true;
        state.error = action.error?.message;
      });
  },
});

export const { logoutUser, reset } = authSlice.actions;
export default authSlice.reducer;
